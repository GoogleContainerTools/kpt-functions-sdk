apiVersion: v1
kind: List
items:
- apiVersion: constraints.gatekeeper.sh/v1beta1
  kind: K8sPSPAllowPrivilegeEscalationContainer
  metadata:
    name: psp-allow-privilege-escalation-container
    annotations:
      config.kubernetes.io/path: allow-privilege-escalation/constraint.yaml
      config.kubernetes.io/index: '0'
  spec:
    match:
      kinds:
      - apiGroups:
        - ''
        kinds:
        - Pod
- apiVersion: constraints.gatekeeper.sh/v1beta1
  kind: K8sPSPAllowedUsers
  metadata:
    name: psp-pods-allowed-user-ranges
    annotations:
      config.kubernetes.io/path: users/constraint.yaml
      config.kubernetes.io/index: '0'
  spec:
    match:
      kinds:
      - apiGroups:
        - ''
        kinds:
        - Pod
    parameters:
      runAsUser:
        rule: MustRunAs
        ranges:
        - min: 100
          max: 200
- apiVersion: constraints.gatekeeper.sh/v1beta1
  kind: K8sPSPAppArmor
  metadata:
    name: psp-apparmor
    annotations:
      config.kubernetes.io/path: apparmor/constraint.yaml
      config.kubernetes.io/index: '0'
  spec:
    match:
      kinds:
      - apiGroups:
        - ''
        kinds:
        - Pod
    parameters:
      allowedProfiles:
      - runtime/default
- apiVersion: constraints.gatekeeper.sh/v1beta1
  kind: K8sPSPFSGroup
  metadata:
    name: psp-fsgroup
    annotations:
      config.kubernetes.io/path: fsgroup/constraint.yaml
      config.kubernetes.io/index: '0'
  spec:
    match:
      kinds:
      - apiGroups:
        - ''
        kinds:
        - Pod
    parameters:
      rule: MayRunAs
      ranges:
      - min: 1
        max: 1000
- apiVersion: constraints.gatekeeper.sh/v1beta1
  kind: K8sPSPFlexVolumes
  metadata:
    name: psp-flexvolume-drivers
    annotations:
      config.kubernetes.io/path: flexvolume-drivers/constraint.yaml
      config.kubernetes.io/index: '0'
  spec:
    match:
      kinds:
      - apiGroups:
        - ''
        kinds:
        - Pod
    parameters:
      allowedFlexVolumes:
      - driver: example/lvm
      - driver: example/cifs
- apiVersion: constraints.gatekeeper.sh/v1beta1
  kind: K8sPSPForbiddenSysctls
  metadata:
    name: psp-forbidden-sysctls
    annotations:
      config.kubernetes.io/path: forbidden-sysctls/constraint.yaml
      config.kubernetes.io/index: '0'
  spec:
    match:
      kinds:
      - apiGroups:
        - ''
        kinds:
        - Pod
    parameters:
      forbiddenSysctls:
      - kernel.*
- apiVersion: constraints.gatekeeper.sh/v1beta1
  kind: K8sPSPHostFilesystem
  metadata:
    name: psp-host-filesystem
    annotations:
      config.kubernetes.io/path: host-filesystem/constraint.yaml
      config.kubernetes.io/index: '0'
  spec:
    match:
      kinds:
      - apiGroups:
        - ''
        kinds:
        - Pod
    parameters:
      allowedHostPaths:
      - readOnly: true
        pathPrefix: /foo
- apiVersion: constraints.gatekeeper.sh/v1beta1
  kind: K8sPSPHostNamespace
  metadata:
    name: psp-host-namespace
    annotations:
      config.kubernetes.io/path: host-namespaces/constraint.yaml
      config.kubernetes.io/index: '0'
  spec:
    match:
      kinds:
      - apiGroups:
        - ''
        kinds:
        - Pod
- apiVersion: constraints.gatekeeper.sh/v1beta1
  kind: K8sPSPHostNetworkingPorts
  metadata:
    name: psp-host-network-ports
    annotations:
      config.kubernetes.io/path: host-network-ports/constraint.yaml
      config.kubernetes.io/index: '0'
  spec:
    match:
      kinds:
      - apiGroups:
        - ''
        kinds:
        - Pod
    parameters:
      hostNetwork: true
      min: 80
      max: 9000
- apiVersion: constraints.gatekeeper.sh/v1beta1
  kind: K8sPSPPrivilegedContainer
  metadata:
    name: psp-privileged-container
    annotations:
      config.kubernetes.io/path: privileged-containers/constraint.yaml
      config.kubernetes.io/index: '0'
  spec:
    match:
      kinds:
      - apiGroups:
        - ''
        kinds:
        - Pod
- apiVersion: constraints.gatekeeper.sh/v1beta1
  kind: K8sPSPProcMount
  metadata:
    name: psp-proc-mount
    annotations:
      config.kubernetes.io/path: proc-mount/constraint.yaml
      config.kubernetes.io/index: '0'
  spec:
    match:
      kinds:
      - apiGroups:
        - ''
        kinds:
        - Pod
    parameters:
      procMount: Default
- apiVersion: constraints.gatekeeper.sh/v1beta1
  kind: K8sPSPReadOnlyRootFilesystem
  metadata:
    name: psp-readonlyrootfilesystem
    annotations:
      config.kubernetes.io/path: read-only-root-filesystem/constraint.yaml
      config.kubernetes.io/index: '0'
  spec:
    match:
      kinds:
      - apiGroups:
        - ''
        kinds:
        - Pod
- apiVersion: constraints.gatekeeper.sh/v1beta1
  kind: K8sPSPSELinux
  metadata:
    name: psp-selinux
    annotations:
      config.kubernetes.io/path: selinux/constraint.yaml
      config.kubernetes.io/index: '0'
  spec:
    match:
      kinds:
      - apiGroups:
        - ''
        kinds:
        - Pod
    parameters:
      allowedSELinuxOptions:
        level: 's0:c123,c456'
        role: object_r
        type: svirt_sandbox_file_t
        user: system_u
- apiVersion: constraints.gatekeeper.sh/v1beta1
  kind: K8sPSPSeccomp
  metadata:
    name: psp-seccomp
    annotations:
      config.kubernetes.io/path: seccomp/constraint.yaml
      config.kubernetes.io/index: '0'
  spec:
    match:
      kinds:
      - apiGroups:
        - ''
        kinds:
        - Pod
    parameters:
      allowedProfiles:
      - runtime/default
      - docker/default
- apiVersion: constraints.gatekeeper.sh/v1beta1
  kind: K8sPSPVolumeTypes
  metadata:
    name: psp-volume-types
    annotations:
      config.kubernetes.io/path: volumes/constraint.yaml
      config.kubernetes.io/index: '0'
  spec:
    match:
      kinds:
      - apiGroups:
        - ''
        kinds:
        - Pod
    parameters:
      volumes:
      - configMap
      - emptyDir
      - projected
      - secret
      - downwardAPI
      - persistentVolumeClaim
      - flexVolume
- apiVersion: templates.gatekeeper.sh/v1beta1
  kind: ConstraintTemplate
  metadata:
    name: k8spspallowedusers
    annotations:
      config.kubernetes.io/path: users/template.yaml
      config.kubernetes.io/index: '0'
  spec:
    crd:
      spec:
        names:
          kind: K8sPSPAllowedUsers
        validation:
          openAPIV3Schema:
            properties:
              runAsUser:
                rule:
                  type: string
                ranges:
                  type: array
                  items:
                    type: object
                    properties:
                      min:
                        type: integer
                      max:
                        type: integer
    targets:
    - target: admission.k8s.gatekeeper.sh
      rego: >
        package k8spspallowedusers


        violation[{"msg": msg}] {
          rule := input.parameters.runAsUser.rule
          input_containers[input_container]
          provided_user := run_as_user(input_container.securityContext, input.review)
          not accept_users(rule, provided_user)
          msg := sprintf("Container %v is attempting to run as disallowed user %v", [input_container.name, provided_user])
        }


        violation[{"msg": msg}] {
          rule := input.parameters.runAsUser.rule
          input_containers[input_container]
          not run_as_user(input_container.securityContext, input.review)
          rule != "RunAsAny"
          msg := sprintf("Container %v is attempting to run without a required securityContext/runAsUser", [input_container.name])
        }


        accept_users("RunAsAny", provided_user) {true}


        accept_users("MustRunAsNonRoot", provided_user) = res {res :=
        provided_user != 0}


        accept_users("MustRunAs", provided_user) = res  {
          ranges := input.parameters.runAsUser.ranges
          matching := {1 | provided_user >= ranges[j].min; provided_user <= ranges[j].max}
          res := count(matching) > 0
        }


        input_containers[c] {
          c := input.review.object.spec.containers[_]
        }


        input_containers[c] {
          c := input.review.object.spec.initContainers[_]
        }


        run_as_user(container_security_context, review) = run_as_user {
          run_as_user := container_security_context.runAsUser
        }


        run_as_user(container_security_context, review) = run_as_user {
          not container_security_context.runAsUser
          review.kind.kind == "Pod"
          run_as_user := review.object.spec.securityContext.runAsUser
        }
- apiVersion: templates.gatekeeper.sh/v1beta1
  kind: ConstraintTemplate
  metadata:
    name: k8spspallowprivilegeescalationcontainer
    annotations:
      config.kubernetes.io/path: allow-privilege-escalation/template.yaml
      config.kubernetes.io/index: '0'
  spec:
    crd:
      spec:
        names:
          kind: K8sPSPAllowPrivilegeEscalationContainer
    targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8spspallowprivilegeescalationcontainer

        violation[{"msg": msg, "details": {}}] {
            c := input_containers[_]
            input_allow_privilege_escalation(c)
            msg := sprintf("Privilege escalation container is not allowed: %v", [c.name])
        }

        input_allow_privilege_escalation(c) {
            not has_field(c, "securityContext")
        }
        input_allow_privilege_escalation(c) {
            not c.securityContext.allowPrivilegeEscalation == false
        }
        input_containers[c] {
            c := input.review.object.spec.containers[_]
        }
        input_containers[c] {
            c := input.review.object.spec.initContainers[_]
        }
        # has_field returns whether an object has a field
        has_field(object, field) = true {
            object[field]
        }
- apiVersion: templates.gatekeeper.sh/v1beta1
  kind: ConstraintTemplate
  metadata:
    name: k8spspapparmor
    annotations:
      config.kubernetes.io/path: apparmor/template.yaml
      config.kubernetes.io/index: '0'
  spec:
    crd:
      spec:
        names:
          kind: K8sPSPAppArmor
        validation:
          openAPIV3Schema:
            properties:
              allowedProfiles:
                type: array
                items:
                  type: string
    targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8spspapparmor

        violation[{"msg": msg, "details": {}}] {
            metadata := input.review.object.metadata
            not input_apparmor_allowed(metadata)
            msg := sprintf("AppArmor profile is not allowed, pod: %v. Allowed profiles: %v", [input.review.object.metadata.name, input.parameters.allowedProfiles])
        }

        input_apparmor_allowed(metadata) {
            metadata.annotations[key] == input.parameters.allowedProfiles[_]
            startswith(key, "container.apparmor.security.beta.kubernetes.io/")
            [prefix, name] := split(key, "/")
            name == input_containers[_].name
        }

        input_containers[c] {
            c := input.review.object.spec.containers[_]
        }
        input_containers[c] {
            c := input.review.object.spec.initContainers[_]
        }
- apiVersion: templates.gatekeeper.sh/v1beta1
  kind: ConstraintTemplate
  metadata:
    name: k8spspflexvolumes
    annotations:
      config.kubernetes.io/path: flexvolume-drivers/template.yaml
      config.kubernetes.io/index: '0'
  spec:
    crd:
      spec:
        names:
          kind: K8sPSPFlexVolumes
        validation:
          openAPIV3Schema:
            properties:
              allowedFlexVolumes:
                type: array
                items:
                  type: object
                  properties:
                    driver:
                      type: string
    targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8spspflexvolumes

        violation[{"msg": msg, "details": {}}] {
          volume := input_flexvolumes[_]
          not input_flexvolumes_allowed(volume)
          msg := sprintf("FlexVolume %v is not allowed, pod: %v. Allowed drivers: %v", [volume, input.review.object.metadata.name, input.parameters.allowedFlexVolumes])
        }

        input_flexvolumes_allowed(volume) {
          # An empty list means there is no restriction on flexVolume drivers used
          input.parameters.allowedFlexVolumes == []
        }

        input_flexvolumes_allowed(volume) {
          input.parameters.allowedFlexVolumes[_].driver == volume.flexVolume.driver
        }

        input_flexvolumes[v] {
          v := input.review.object.spec.volumes[_]
          has_field(v, "flexVolume")
        }

        # has_field returns whether an object has a field
        has_field(object, field) = true {
          object[field]
        }
- apiVersion: templates.gatekeeper.sh/v1beta1
  kind: ConstraintTemplate
  metadata:
    name: k8spspforbiddensysctls
    annotations:
      config.kubernetes.io/path: forbidden-sysctls/template.yaml
      config.kubernetes.io/index: '0'
  spec:
    crd:
      spec:
        names:
          kind: K8sPSPForbiddenSysctls
        validation:
          openAPIV3Schema:
            properties:
              forbiddenSysctls:
                type: array
                items:
                  type: string
    targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8spspforbiddensysctls

        violation[{"msg": msg, "details": {}}] {
            sysctls := {x | x = input.review.object.spec.securityContext.sysctls[_][name]}
            input_sysctls(sysctls)
            msg := sprintf("One of the sysctls %v is not allowed, pod: %v. Forbidden sysctls: %v", [sysctls, input.review.object.metadata.name, input.parameters.forbiddenSysctls])
        }

        # * may be used to forbid all sysctls
        input_sysctls(sysctls) {
            input.parameters.forbiddenSysctls[_] == "*"
        }

        input_sysctls(sysctls) {
            forbidden_sysctls := {x | x = input.parameters.forbiddenSysctls[_]}
            test := sysctls & forbidden_sysctls
            count(test) > 0
        }

        input_sysctls(sysctls) {
            prefix_matches(input.parameters.forbiddenSysctls[_], sysctls[_])
        }

        prefix_matches(prefix, sysctl) {
            contains(sysctl, trim(prefix, "*"))
        }
- apiVersion: templates.gatekeeper.sh/v1beta1
  kind: ConstraintTemplate
  metadata:
    name: k8spspfsgroup
    annotations:
      config.kubernetes.io/path: fsgroup/template.yaml
      config.kubernetes.io/index: '0'
  spec:
    crd:
      spec:
        names:
          kind: K8sPSPFSGroup
        validation:
          openAPIV3Schema:
            properties:
              rule:
                type: string
              ranges:
                type: array
                items:
                  type: object
                  properties:
                    min:
                      type: integer
                    max:
                      type: integer
    targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8spspfsgroup

        violation[{"msg": msg, "details": {}}] {
          spec := input.review.object.spec
          not input_fsGroup_allowed(spec)
          msg := sprintf("The provided pod spec fsGroup is not allowed, pod: %v. Allowed fsGroup: %v", [input.review.object.metadata.name, input.parameters])
        }

        input_fsGroup_allowed(spec) {
          # RunAsAny - No range is required. Allows any fsGroup ID to be specified.
          input.parameters.rule == "RunAsAny"
        }
        input_fsGroup_allowed(spec) {
          # MustRunAs - Validates pod spec fsgroup against all ranges
          input.parameters.rule == "MustRunAs"
          fg := spec.securityContext.fsGroup
          count(input.parameters.ranges) > 0
          range := input.parameters.ranges[_]
          value_within_range(range, fg)
        }
        input_fsGroup_allowed(spec) {
            # MayRunAs - Validates pod spec fsgroup against all ranges or allow pod spec fsgroup to be left unset
            input.parameters.rule == "MayRunAs"
            not has_field(spec, "securityContext")
        }
        input_fsGroup_allowed(spec) {
            # MayRunAs - Validates pod spec fsgroup against all ranges or allow pod spec fsgroup to be left unset
            input.parameters.rule == "MayRunAs"
            not spec.securityContext.fsGroup
        }
        input_fsGroup_allowed(spec) {
          # MayRunAs - Validates pod spec fsgroup against all ranges or allow pod spec fsgroup to be left unset
          input.parameters.rule == "MayRunAs"
          fg := spec.securityContext.fsGroup
          count(input.parameters.ranges) > 0
          range := input.parameters.ranges[_]
          value_within_range(range, fg)
        }
        value_within_range(range, value) {
          range.min <= value
          range.max >= value
        }
        # has_field returns whether an object has a field
        has_field(object, field) = true {
          object[field]
        }
- apiVersion: templates.gatekeeper.sh/v1beta1
  kind: ConstraintTemplate
  metadata:
    name: k8spsphostfilesystem
    annotations:
      config.kubernetes.io/path: host-filesystem/template.yaml
      config.kubernetes.io/index: '0'
  spec:
    crd:
      spec:
        names:
          kind: K8sPSPHostFilesystem
        validation:
          openAPIV3Schema:
            properties:
              allowedHostPaths:
                type: array
                items:
                  type: object
                  properties:
                    readOnly:
                      type: boolean
                    pathPrefix:
                      type: string
    targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8spsphostfilesystem

        violation[{"msg": msg, "details": {}}] {
            volume := input_hostpath_volumes[_]
            not input_hostpath_allowed(volume)
            msg := sprintf("HostPath volume %v is not allowed, pod: %v. Allowed path: %v", [volume, input.review.object.metadata.name, input.parameters.allowedHostPaths])
        }

        input_hostpath_allowed(volume) {
            # An empty list means there is no restriction on host paths used
            input.parameters.allowedHostPaths == []
        }

        input_hostpath_allowed(volume) {
            allowedHostPath := input.parameters.allowedHostPaths[_]
            path_matches(allowedHostPath.pathPrefix, volume.hostPath.path)
            not allowedHostPath.readOnly == true
        }

        input_hostpath_allowed(volume) {
            allowedHostPath := input.parameters.allowedHostPaths[_]
            path_matches(allowedHostPath.pathPrefix, volume.hostPath.path)
            allowedHostPath.readOnly
            not writeable_input_volume_mounts(volume.name)
        }

        writeable_input_volume_mounts(volume_name) {
            container := input_containers[_]
            mount := container.volumeMounts[_]
            mount.name == volume_name
            not mount.readOnly
        }

        # This allows "/foo", "/foo/", "/foo/bar" etc., but
        # disallows "/fool", "/etc/foo" etc.
        path_matches(prefix, path) {
            a := split(trim(prefix, "/"), "/")
            b := split(trim(path, "/"), "/")
            prefix_matches(a, b)
        }
        prefix_matches(a, b) {
            count(a) <= count(b)
            not any_not_equal_upto(a, b, count(a))
        }

        any_not_equal_upto(a, b, n) {
            a[i] != b[i]
            i < n
        }

        input_hostpath_volumes[v] {
            v := input.review.object.spec.volumes[_]
            has_field(v, "hostPath")
        }

        # has_field returns whether an object has a field
        has_field(object, field) = true {
            object[field]
        }
        input_containers[c] {
            c := input.review.object.spec.containers[_]
        }

        input_containers[c] {
            c := input.review.object.spec.initContainers[_]
        }
- apiVersion: templates.gatekeeper.sh/v1beta1
  kind: ConstraintTemplate
  metadata:
    name: k8spsphostnamespace
    annotations:
      config.kubernetes.io/path: host-namespaces/template.yaml
      config.kubernetes.io/index: '0'
  spec:
    crd:
      spec:
        names:
          kind: K8sPSPHostNamespace
    targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8spsphostnamespace

        violation[{"msg": msg, "details": {}}] {
            input_share_hostnamespace(input.review.object)
            msg := sprintf("Sharing the host namespace is not allowed: %v", [input.review.object.metadata.name])
        }

        input_share_hostnamespace(o) {
            o.spec.hostPID
        }
        input_share_hostnamespace(o) {
            o.spec.hostIPC
        }
- apiVersion: templates.gatekeeper.sh/v1beta1
  kind: ConstraintTemplate
  metadata:
    name: k8spsphostnetworkingports
    annotations:
      config.kubernetes.io/path: host-network-ports/template.yaml
      config.kubernetes.io/index: '0'
  spec:
    crd:
      spec:
        names:
          kind: K8sPSPHostNetworkingPorts
        validation:
          openAPIV3Schema:
            properties:
              hostNetwork:
                type: boolean
              min:
                type: integer
              max:
                type: integer
    targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8spsphostnetworkingports

        violation[{"msg": msg, "details": {}}] {
          input_share_hostnetwork(input.review.object)
          msg := sprintf("The specified hostNetwork and hostPort are not allowed, pod: %v. Allowed values: %v", [input.review.object.metadata.name, input.parameters])
        }

        input_share_hostnetwork(o) {
          not input.parameters.hostNetwork
          o.spec.hostNetwork
        }

        input_share_hostnetwork(o) {
          hostPort := input_containers[_].ports[_].hostPort
          hostPort < input.parameters.min
        }

        input_share_hostnetwork(o) {
          hostPort := input_containers[_].ports[_].hostPort
          hostPort > input.parameters.max
        }

        input_containers[c] {
          c := input.review.object.spec.containers[_]
        }

        input_containers[c] {
          c := input.review.object.spec.initContainers[_]
        }
- apiVersion: templates.gatekeeper.sh/v1beta1
  kind: ConstraintTemplate
  metadata:
    name: k8spspprivilegedcontainer
    annotations:
      config.kubernetes.io/path: privileged-containers/template.yaml
      config.kubernetes.io/index: '0'
  spec:
    crd:
      spec:
        names:
          kind: K8sPSPPrivilegedContainer
    targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8spspprivileged

        violation[{"msg": msg, "details": {}}] {
            c := input_containers[_]
            c.securityContext.privileged
            msg := sprintf("Privileged container is not allowed: %v, securityContext: %v", [c.name, c.securityContext])
        }

        input_containers[c] {
            c := input.review.object.spec.containers[_]
        }

        input_containers[c] {
            c := input.review.object.spec.initContainers[_]
        }
- apiVersion: templates.gatekeeper.sh/v1beta1
  kind: ConstraintTemplate
  metadata:
    name: k8spspprocmount
    annotations:
      config.kubernetes.io/path: proc-mount/template.yaml
      config.kubernetes.io/index: '0'
  spec:
    crd:
      spec:
        names:
          kind: K8sPSPProcMount
        validation:
          openAPIV3Schema:
            properties:
              procMount:
                type: string
    targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8spspprocmount

        violation[{"msg": msg, "details": {}}] {
            c := input_containers[_]
            not input_proc_mount_type_allowed(c)
            msg := sprintf("ProcMount type is not allowed, container: %v. Allowed procMount types: %v", [c.name, input.parameters.procMount])
        }

        input_proc_mount_type_allowed(c) {
            input.parameters.procMount == c.securityContext.procMount
        }

        input_containers[c] {
            c := input.review.object.spec.containers[_]
            c.securityContext.procMount
        }

        input_containers[c] {
            c := input.review.object.spec.initContainers[_]
            c.securityContext.procMount
        }
- apiVersion: templates.gatekeeper.sh/v1beta1
  kind: ConstraintTemplate
  metadata:
    name: k8spspreadonlyrootfilesystem
    annotations:
      config.kubernetes.io/path: read-only-root-filesystem/template.yaml
      config.kubernetes.io/index: '0'
  spec:
    crd:
      spec:
        names:
          kind: K8sPSPReadOnlyRootFilesystem
    targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8spspreadonlyrootfilesystem

        violation[{"msg": msg, "details": {}}] {
            c := input_containers[_]
            input_read_only_root_fs(c)
            msg := sprintf("only read-only root filesystem container is allowed: %v", [c.name])
        }

        input_read_only_root_fs(c) {
            not has_field(c, "securityContext")
        }
        input_read_only_root_fs(c) {
            not c.securityContext.readOnlyRootFilesystem == true
        }

        input_containers[c] {
            c := input.review.object.spec.containers[_]
        }
        input_containers[c] {
            c := input.review.object.spec.initContainers[_]
        }

        # has_field returns whether an object has a field
        has_field(object, field) = true {
            object[field]
        }
- apiVersion: templates.gatekeeper.sh/v1beta1
  kind: ConstraintTemplate
  metadata:
    name: k8spspseccomp
    annotations:
      config.kubernetes.io/path: seccomp/template.yaml
      config.kubernetes.io/index: '0'
  spec:
    crd:
      spec:
        names:
          kind: K8sPSPSeccomp
        validation:
          openAPIV3Schema:
            properties:
              allowedProfiles:
                type: array
                items:
                  type: string
    targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8spspseccomp

        violation[{"msg": msg, "details": {}}] {
            metadata := input.review.object.metadata
            not input_seccomp_allowed(metadata)
            msg := sprintf("Seccomp profile is not allowed, pod: %v. Allowed profiles: %v", [input.review.object.metadata.name, input.parameters.allowedProfiles])
        }

        input_seccomp_allowed(metadata) {
            input.parameters.allowedProfiles[_] == "*"
        }

        input_seccomp_allowed(metadata) {
            metadata.annotations["seccomp.security.alpha.kubernetes.io/pod"] == input.parameters.allowedProfiles[_]
        }

        input_seccomp_allowed(metadata) {
            metadata.annotations[key] == input.parameters.allowedProfiles[_]
            startswith(key, "container.seccomp.security.alpha.kubernetes.io/")
            [prefix, name] := split(key, "/")
            name == input_containers[_].name
        }

        input_containers[c] {
            c := input.review.object.spec.containers[_]
        }
        input_containers[c] {
            c := input.review.object.spec.initContainers[_]
        }
- apiVersion: templates.gatekeeper.sh/v1beta1
  kind: ConstraintTemplate
  metadata:
    name: k8spspselinux
    annotations:
      config.kubernetes.io/path: selinux/template.yaml
      config.kubernetes.io/index: '0'
  spec:
    crd:
      spec:
        names:
          kind: K8sPSPSELinux
        validation:
          openAPIV3Schema:
            properties:
              allowedSELinuxOptions:
                type: object
                properties:
                  level:
                    type: string
                  role:
                    type: string
                  type:
                    type: string
                  user:
                    type: string
    targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8spspselinux

        violation[{"msg": msg, "details": {}}] {
            c := input_containers[_]
            not input_seLinuxOptions_allowed(c.securityContext.seLinuxOptions)
            msg := sprintf("SELinux option is not allowed, pod: %v. Allowed options: %v", [input.review.object.metadata.name, input.parameters.allowedSELinuxOptions])
        }

        input_seLinuxOptions_allowed(options) {
            input.parameters.allowedSELinuxOptions.level == options.level
        }

        input_seLinuxOptions_allowed(options) {
            input.parameters.allowedSELinuxOptions.role == options.role
        }

        input_seLinuxOptions_allowed(options) {
            input.parameters.allowedSELinuxOptions.type == options.type
        }

        input_seLinuxOptions_allowed(options) {
            input.parameters.allowedSELinuxOptions.user == options.user
        }

        input_containers[c] {
            c := input.review.object.spec.containers[_]
            has_field(c.securityContext, "seLinuxOptions")
        }
        input_containers[c] {
            c := input.review.object.spec.initContainers[_]
            has_field(c.securityContext, "seLinuxOptions")
        }

        # has_field returns whether an object has a field
        has_field(object, field) = true {
            object[field]
        }
- apiVersion: templates.gatekeeper.sh/v1beta1
  kind: ConstraintTemplate
  metadata:
    name: k8spspvolumetypes
    annotations:
      config.kubernetes.io/path: volumes/template.yaml
      config.kubernetes.io/index: '0'
  spec:
    crd:
      spec:
        names:
          kind: K8sPSPVolumeTypes
        validation:
          openAPIV3Schema:
            properties:
              volumes:
                type: array
                items:
                  type: string
    targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8spspvolumetypes

        violation[{"msg": msg, "details": {}}] {
          volume_fields := {x | input.review.object.spec.volumes[_][x]; x != "name"}
          not input_volume_type_allowed(volume_fields)
          msg := sprintf("One of the volume types %v is not allowed, pod: %v. Allowed volume types: %v", [volume_fields, input.review.object.metadata.name, input.parameters.volumes])
        }

        # * may be used to allow all volume types
        input_volume_type_allowed(volume_fields) {
          input.parameters.volumes[_] == "*"
        }

        input_volume_type_allowed(volume_fields) {
          allowed_set := {x | x = input.parameters.volumes[_]}
          test := volume_fields - allowed_set
          count(test) == 0
        }
- apiVersion: v1
  kind: Pod
  metadata:
    name: fsgroup-demo
    annotations:
      config.kubernetes.io/path: fsgroup/example.yaml
      config.kubernetes.io/index: '0'
  spec:
    securityContext:
      fsGroup: 2000
    volumes:
    - name: fsgroup-demo-vol
      emptyDir: {}
    containers:
    - name: fsgroup-demo
      image: busybox
      command:
      - sh
      - '-c'
      - sleep 1h
      volumeMounts:
      - name: fsgroup-demo-vol
        mountPath: /data/demo
- apiVersion: v1
  kind: Pod
  metadata:
    name: nginx-apparmor
    annotations:
      container.apparmor.security.beta.kubernetes.io/nginx: unconfined
      config.kubernetes.io/path: apparmor/example.yaml
      config.kubernetes.io/index: '0'
    labels:
      app: nginx-apparmor
  spec:
    containers:
    - name: nginx
      image: nginx
- apiVersion: v1
  kind: Pod
  metadata:
    name: nginx-flexvolume-driver
    labels:
      app: nginx-flexvolume-driver
    annotations:
      config.kubernetes.io/path: flexvolume-drivers/example.yaml
      config.kubernetes.io/index: '0'
  spec:
    containers:
    - name: nginx
      image: nginx
      volumeMounts:
      - mountPath: /test
        name: test-volume
        readOnly: true
    volumes:
    - name: test-volume
      flexVolume:
        driver: example/testdriver
- apiVersion: v1
  kind: Pod
  metadata:
    name: nginx-forbidden-sysctls
    labels:
      app: nginx-forbidden-sysctls
    annotations:
      config.kubernetes.io/path: forbidden-sysctls/example.yaml
      config.kubernetes.io/index: '0'
  spec:
    containers:
    - name: nginx
      image: nginx
    securityContext:
      sysctls:
      - name: kernel.msgmax
        value: '65536'
- apiVersion: v1
  kind: Pod
  metadata:
    name: nginx-host-filesystem
    labels:
      app: nginx-host-filesystem
    annotations:
      config.kubernetes.io/path: host-filesystem/example.yaml
      config.kubernetes.io/index: '0'
  spec:
    containers:
    - name: nginx
      image: nginx
      volumeMounts:
      - mountPath: /cache
        name: cache-volume
        readOnly: true
    volumes:
    - name: cache-volume
      hostPath:
        path: /tmp
- apiVersion: v1
  kind: Pod
  metadata:
    name: nginx-host-namespace
    labels:
      app: nginx-host-namespace
    annotations:
      config.kubernetes.io/path: host-namespaces/example.yaml
      config.kubernetes.io/index: '0'
  spec:
    hostPID: true
    hostIPC: true
    containers:
    - name: nginx
      image: nginx
- apiVersion: v1
  kind: Pod
  metadata:
    name: nginx-host-networking-ports
    labels:
      app: nginx-host-networking-ports
    annotations:
      config.kubernetes.io/path: host-network-ports/example.yaml
      config.kubernetes.io/index: '0'
  spec:
    hostNetwork: true
    containers:
    - name: nginx
      image: nginx
      ports:
      - containerPort: 9001
        hostPort: 9001
- apiVersion: v1
  kind: Pod
  metadata:
    name: nginx-privilege-escalation
    labels:
      app: nginx-privilege-escalation
    annotations:
      config.kubernetes.io/path: allow-privilege-escalation/example.yaml
      config.kubernetes.io/index: '0'
  spec:
    containers:
    - name: nginx
      image: nginx
      securityContext:
        allowPrivilegeEscalation: true
- apiVersion: v1
  kind: Pod
  metadata:
    name: nginx-privileged
    labels:
      app: nginx-privileged
    annotations:
      config.kubernetes.io/path: privileged-containers/example.yaml
      config.kubernetes.io/index: '0'
  spec:
    containers:
    - name: nginx
      image: nginx
      securityContext:
        privileged: true
- apiVersion: v1
  kind: Pod
  metadata:
    name: nginx-proc-mount
    labels:
      app: nginx-proc-mount
    annotations:
      config.kubernetes.io/path: proc-mount/example.yaml
      config.kubernetes.io/index: '0'
  spec:
    containers:
    - name: nginx
      image: nginx
      securityContext:
        procMount: Unmasked
- apiVersion: v1
  kind: Pod
  metadata:
    name: nginx-readonlyrootfilesystem
    labels:
      app: nginx-readonlyrootfilesystem
    annotations:
      config.kubernetes.io/path: read-only-root-filesystem/example.yaml
      config.kubernetes.io/index: '0'
  spec:
    containers:
    - name: nginx
      image: nginx
      securityContext:
        readOnlyRootFilesystem: false
- apiVersion: v1
  kind: Pod
  metadata:
    name: nginx-seccomp
    annotations:
      container.seccomp.security.alpha.kubernetes.io/nginx: unconfined
      config.kubernetes.io/path: seccomp/example.yaml
      config.kubernetes.io/index: '0'
    labels:
      app: nginx-seccomp
  spec:
    containers:
    - name: nginx
      image: nginx
- apiVersion: v1
  kind: Pod
  metadata:
    name: nginx-selinux
    labels:
      app: nginx-selinux
    annotations:
      config.kubernetes.io/path: selinux/example.yaml
      config.kubernetes.io/index: '0'
  spec:
    containers:
    - name: nginx
      image: nginx
      securityContext:
        seLinuxOptions:
          level: 's1:c234,c567'
          user: sysadm_u
          role: sysadm_r
          type: svirt_lxc_net_t
- apiVersion: v1
  kind: Pod
  metadata:
    name: nginx-users
    labels:
      app: nginx-users
    annotations:
      config.kubernetes.io/path: users/example.yaml
      config.kubernetes.io/index: '0'
  spec:
    containers:
    - name: nginx
      image: nginx
      securityContext:
        runAsUser: 250
- apiVersion: v1
  kind: Pod
  metadata:
    name: nginx-volume-types
    labels:
      app: nginx-volume-types
    annotations:
      config.kubernetes.io/path: volumes/example.yaml
      config.kubernetes.io/index: '0'
  spec:
    containers:
    - name: nginx
      image: nginx
      volumeMounts:
      - mountPath: /cache
        name: cache-volume
    - name: nginx2
      image: nginx
      volumeMounts:
      - mountPath: /cache2
        name: demo-vol
    volumes:
    - name: cache-volume
      hostPath:
        path: /tmp
    - name: demo-vol
      emptyDir: {}
