
/**
 * CODE GENERATED BY 'typgen' BINARY.
 *
 * DO NOT EDIT.
 */

import { KubernetesObject } from 'kpt-functions';
import * as apiCoreV1 from './io.k8s.api.core.v1';
import * as apisMetaV1 from './io.k8s.apimachinery.pkg.apis.meta.v1';

// Event is a report of an event somewhere in the cluster. It generally denotes some state change in the system. Events have a limited retention time and triggers and messages may evolve with time.  Event consumers should not rely on the timing of an event with a given Reason reflecting a consistent underlying trigger, or the continued existence of events with that Reason.  Events should be treated as informative, best-effort, supplemental data.
export class Event implements KubernetesObject {
  // action is what action was taken/failed regarding to the regarding object. It is machine-readable. This field can have at most 128 characters.
  public action?: string;

  // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  public apiVersion: string;

  // deprecatedCount is the deprecated field assuring backward compatibility with core.v1 Event type.
  public deprecatedCount?: number;

  // deprecatedFirstTimestamp is the deprecated field assuring backward compatibility with core.v1 Event type.
  public deprecatedFirstTimestamp?: apisMetaV1.Time;

  // deprecatedLastTimestamp is the deprecated field assuring backward compatibility with core.v1 Event type.
  public deprecatedLastTimestamp?: apisMetaV1.Time;

  // deprecatedSource is the deprecated field assuring backward compatibility with core.v1 Event type.
  public deprecatedSource?: apiCoreV1.EventSource;

  // eventTime is the time when this Event was first observed. It is required.
  public eventTime: apisMetaV1.MicroTime;

  // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  public kind: string;

  // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  public metadata: apisMetaV1.ObjectMeta;

  // note is a human-readable description of the status of this operation. Maximal length of the note is 1kB, but libraries should be prepared to handle values up to 64kB.
  public note?: string;

  // reason is why the action was taken. It is human-readable. This field can have at most 128 characters.
  public reason?: string;

  // regarding contains the object this Event is about. In most cases it's an Object reporting controller implements, e.g. ReplicaSetController implements ReplicaSets and this event is emitted because it acts on some changes in a ReplicaSet object.
  public regarding?: apiCoreV1.ObjectReference;

  // related is the optional secondary object for more complex actions. E.g. when regarding object triggers a creation or deletion of related object.
  public related?: apiCoreV1.ObjectReference;

  // reportingController is the name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`. This field cannot be empty for new Events.
  public reportingController?: string;

  // reportingInstance is the ID of the controller instance, e.g. `kubelet-xyzf`. This field cannot be empty for new Events and it can have at most 128 characters.
  public reportingInstance?: string;

  // series is data about the Event series this event represents or nil if it's a singleton Event.
  public series?: EventSeries;

  // type is the type of this event (Normal, Warning), new types could be added in the future. It is machine-readable.
  public type?: string;

  constructor(desc: Event.Interface) {
    this.action = desc.action;
    this.apiVersion = Event.apiVersion;
    this.deprecatedCount = desc.deprecatedCount;
    this.deprecatedFirstTimestamp = desc.deprecatedFirstTimestamp;
    this.deprecatedLastTimestamp = desc.deprecatedLastTimestamp;
    this.deprecatedSource = desc.deprecatedSource;
    this.eventTime = desc.eventTime;
    this.kind = Event.kind;
    this.metadata = desc.metadata;
    this.note = desc.note;
    this.reason = desc.reason;
    this.regarding = desc.regarding;
    this.related = desc.related;
    this.reportingController = desc.reportingController;
    this.reportingInstance = desc.reportingInstance;
    this.series = desc.series;
    this.type = desc.type;
  }
}

export function isEvent(o: any): o is Event {
  return o && o.apiVersion === Event.apiVersion && o.kind === Event.kind;
}

export namespace Event {
  export const apiVersion = "events.k8s.io/v1beta1";
  export const group = "events.k8s.io";
  export const version = "v1beta1";
  export const kind = "Event";

  // Event is a report of an event somewhere in the cluster. It generally denotes some state change in the system. Events have a limited retention time and triggers and messages may evolve with time.  Event consumers should not rely on the timing of an event with a given Reason reflecting a consistent underlying trigger, or the continued existence of events with that Reason.  Events should be treated as informative, best-effort, supplemental data.
  export interface Interface {
    // action is what action was taken/failed regarding to the regarding object. It is machine-readable. This field can have at most 128 characters.
    action?: string;

    // deprecatedCount is the deprecated field assuring backward compatibility with core.v1 Event type.
    deprecatedCount?: number;

    // deprecatedFirstTimestamp is the deprecated field assuring backward compatibility with core.v1 Event type.
    deprecatedFirstTimestamp?: apisMetaV1.Time;

    // deprecatedLastTimestamp is the deprecated field assuring backward compatibility with core.v1 Event type.
    deprecatedLastTimestamp?: apisMetaV1.Time;

    // deprecatedSource is the deprecated field assuring backward compatibility with core.v1 Event type.
    deprecatedSource?: apiCoreV1.EventSource;

    // eventTime is the time when this Event was first observed. It is required.
    eventTime: apisMetaV1.MicroTime;

    // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    metadata: apisMetaV1.ObjectMeta;

    // note is a human-readable description of the status of this operation. Maximal length of the note is 1kB, but libraries should be prepared to handle values up to 64kB.
    note?: string;

    // reason is why the action was taken. It is human-readable. This field can have at most 128 characters.
    reason?: string;

    // regarding contains the object this Event is about. In most cases it's an Object reporting controller implements, e.g. ReplicaSetController implements ReplicaSets and this event is emitted because it acts on some changes in a ReplicaSet object.
    regarding?: apiCoreV1.ObjectReference;

    // related is the optional secondary object for more complex actions. E.g. when regarding object triggers a creation or deletion of related object.
    related?: apiCoreV1.ObjectReference;

    // reportingController is the name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`. This field cannot be empty for new Events.
    reportingController?: string;

    // reportingInstance is the ID of the controller instance, e.g. `kubelet-xyzf`. This field cannot be empty for new Events and it can have at most 128 characters.
    reportingInstance?: string;

    // series is data about the Event series this event represents or nil if it's a singleton Event.
    series?: EventSeries;

    // type is the type of this event (Normal, Warning), new types could be added in the future. It is machine-readable.
    type?: string;
  }
}

// EventList is a list of Event objects.
export class EventList {
  // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  public apiVersion: string;

  // items is a list of schema objects.
  public items: Event[];

  // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  public kind: string;

  // Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  public metadata?: apisMetaV1.ListMeta;

  constructor(desc: EventList) {
    this.apiVersion = EventList.apiVersion;
    this.items = desc.items.map((i) => new Event(i));
    this.kind = EventList.kind;
    this.metadata = desc.metadata;
  }
}

export function isEventList(o: any): o is EventList {
  return o && o.apiVersion === EventList.apiVersion && o.kind === EventList.kind;
}

export namespace EventList {
  export const apiVersion = "events.k8s.io/v1beta1";
  export const group = "events.k8s.io";
  export const version = "v1beta1";
  export const kind = "EventList";

  // EventList is a list of Event objects.
  export interface Interface {
    // items is a list of schema objects.
    items: Event[];

    // Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    metadata?: apisMetaV1.ListMeta;
  }
}

// EventSeries contain information on series of events, i.e. thing that was/is happening continuously for some time.
export class EventSeries {
  // count is the number of occurrences in this series up to the last heartbeat time.
  public count: number;

  // lastObservedTime is the time when last Event from the series was seen before last heartbeat.
  public lastObservedTime: apisMetaV1.MicroTime;

  constructor(desc: EventSeries) {
    this.count = desc.count;
    this.lastObservedTime = desc.lastObservedTime;
  }
}