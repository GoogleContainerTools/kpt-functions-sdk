
/**
 * CODE GENERATED BY 'typgen' BINARY.
 *
 * DO NOT EDIT.
 */

import { KubernetesObject } from 'kpt-functions';
import * as apisMetaV1 from './io.k8s.apimachinery.pkg.apis.meta.v1';
import * as pkgUtilIntstr from './io.k8s.apimachinery.pkg.util.intstr';

// PodDisruptionBudget is an object to define the max disruption that can be caused to a collection of pods
export class PodDisruptionBudget implements KubernetesObject {
  // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  public apiVersion: string;

  // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  public kind: string;

  // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  public metadata: apisMetaV1.ObjectMeta;

  // Specification of the desired behavior of the PodDisruptionBudget.
  public spec?: PodDisruptionBudgetSpec;

  // Most recently observed status of the PodDisruptionBudget.
  public status?: PodDisruptionBudgetStatus;

  constructor(desc: PodDisruptionBudget.Interface) {
    this.apiVersion = PodDisruptionBudget.apiVersion;
    this.kind = PodDisruptionBudget.kind;
    this.metadata = desc.metadata;
    this.spec = desc.spec;
    this.status = desc.status;
  }
}

export function isPodDisruptionBudget(o: any): o is PodDisruptionBudget {
  return o && o.apiVersion === PodDisruptionBudget.apiVersion && o.kind === PodDisruptionBudget.kind;
}

export namespace PodDisruptionBudget {
  export const apiVersion = "policy/v1";
  export const group = "policy";
  export const version = "v1";
  export const kind = "PodDisruptionBudget";

  // named constructs a PodDisruptionBudget with metadata.name set to name.
  export function named(name: string): PodDisruptionBudget {
    return new PodDisruptionBudget({metadata: {name}});
  }
  // PodDisruptionBudget is an object to define the max disruption that can be caused to a collection of pods
  export interface Interface {
    // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    metadata: apisMetaV1.ObjectMeta;

    // Specification of the desired behavior of the PodDisruptionBudget.
    spec?: PodDisruptionBudgetSpec;

    // Most recently observed status of the PodDisruptionBudget.
    status?: PodDisruptionBudgetStatus;
  }
}

// PodDisruptionBudgetList is a collection of PodDisruptionBudgets.
export class PodDisruptionBudgetList {
  // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  public apiVersion: string;

  // Items is a list of PodDisruptionBudgets
  public items: PodDisruptionBudget[];

  // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  public kind: string;

  // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  public metadata?: apisMetaV1.ListMeta;

  constructor(desc: PodDisruptionBudgetList) {
    this.apiVersion = PodDisruptionBudgetList.apiVersion;
    this.items = desc.items.map((i) => new PodDisruptionBudget(i));
    this.kind = PodDisruptionBudgetList.kind;
    this.metadata = desc.metadata;
  }
}

export function isPodDisruptionBudgetList(o: any): o is PodDisruptionBudgetList {
  return o && o.apiVersion === PodDisruptionBudgetList.apiVersion && o.kind === PodDisruptionBudgetList.kind;
}

export namespace PodDisruptionBudgetList {
  export const apiVersion = "policy/v1";
  export const group = "policy";
  export const version = "v1";
  export const kind = "PodDisruptionBudgetList";

  // PodDisruptionBudgetList is a collection of PodDisruptionBudgets.
  export interface Interface {
    // Items is a list of PodDisruptionBudgets
    items: PodDisruptionBudget[];

    // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    metadata?: apisMetaV1.ListMeta;
  }
}

// PodDisruptionBudgetSpec is a description of a PodDisruptionBudget.
export class PodDisruptionBudgetSpec {
  // An eviction is allowed if at most "maxUnavailable" pods selected by "selector" are unavailable after the eviction, i.e. even in absence of the evicted pod. For example, one can prevent all voluntary evictions by specifying 0. This is a mutually exclusive setting with "minAvailable".
  public maxUnavailable?: pkgUtilIntstr.IntOrString;

  // An eviction is allowed if at least "minAvailable" pods selected by "selector" will still be available after the eviction, i.e. even in the absence of the evicted pod.  So for example you can prevent all voluntary evictions by specifying "100%".
  public minAvailable?: pkgUtilIntstr.IntOrString;

  // Label query over pods whose evictions are managed by the disruption budget. A null selector will match no pods, while an empty ({}) selector will select all pods within the namespace.
  public selector?: apisMetaV1.LabelSelector;
}

// PodDisruptionBudgetStatus represents information about the status of a PodDisruptionBudget. Status may trail the actual state of a system.
export class PodDisruptionBudgetStatus {
  // Conditions contain conditions for PDB. The disruption controller sets the DisruptionAllowed condition. The following are known values for the reason field (additional reasons could be added in the future): - SyncFailed: The controller encountered an error and wasn't able to compute
  //               the number of allowed disruptions. Therefore no disruptions are
  //               allowed and the status of the condition will be False.
  // - InsufficientPods: The number of pods are either at or below the number
  //                     required by the PodDisruptionBudget. No disruptions are
  //                     allowed and the status of the condition will be False.
  // - SufficientPods: There are more pods than required by the PodDisruptionBudget.
  //                   The condition will be True, and the number of allowed
  //                   disruptions are provided by the disruptionsAllowed property.
  public conditions?: apisMetaV1.Condition[];

  // current number of healthy pods
  public currentHealthy: number;

  // minimum desired number of healthy pods
  public desiredHealthy: number;

  // DisruptedPods contains information about pods whose eviction was processed by the API server eviction subresource handler but has not yet been observed by the PodDisruptionBudget controller. A pod will be in this map from the time when the API server processed the eviction request to the time when the pod is seen by PDB controller as having been marked for deletion (or after a timeout). The key in the map is the name of the pod and the value is the time when the API server processed the eviction request. If the deletion didn't occur and a pod is still there it will be removed from the list automatically by PodDisruptionBudget controller after some time. If everything goes smooth this map should be empty for the most of the time. Large number of entries in the map may indicate problems with pod deletions.
  public disruptedPods?: {[key: string]: apisMetaV1.Time};

  // Number of pod disruptions that are currently allowed.
  public disruptionsAllowed: number;

  // total number of pods counted by this disruption budget
  public expectedPods: number;

  // Most recent generation observed when updating this PDB status. DisruptionsAllowed and other status information is valid only if observedGeneration equals to PDB's object generation.
  public observedGeneration?: number;

  constructor(desc: PodDisruptionBudgetStatus) {
    this.conditions = desc.conditions;
    this.currentHealthy = desc.currentHealthy;
    this.desiredHealthy = desc.desiredHealthy;
    this.disruptedPods = desc.disruptedPods;
    this.disruptionsAllowed = desc.disruptionsAllowed;
    this.expectedPods = desc.expectedPods;
    this.observedGeneration = desc.observedGeneration;
  }
}