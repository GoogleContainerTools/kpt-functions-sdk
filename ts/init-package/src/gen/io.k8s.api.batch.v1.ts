
/**
 * CODE GENERATED BY 'typgen' BINARY.
 *
 * DO NOT EDIT.
 */

import { KubernetesObject } from 'kpt-functions';
import * as apiCoreV1 from './io.k8s.api.core.v1';
import * as apisMetaV1 from './io.k8s.apimachinery.pkg.apis.meta.v1';

// CronJob represents the configuration of a single cron job.
export class CronJob implements KubernetesObject {
  // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  public apiVersion: string;

  // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  public kind: string;

  // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  public metadata: apisMetaV1.ObjectMeta;

  // Specification of the desired behavior of a cron job, including the schedule. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  public spec?: CronJobSpec;

  // Current status of a cron job. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  public status?: CronJobStatus;

  constructor(desc: CronJob.Interface) {
    this.apiVersion = CronJob.apiVersion;
    this.kind = CronJob.kind;
    this.metadata = desc.metadata;
    this.spec = desc.spec;
    this.status = desc.status;
  }
}

export function isCronJob(o: any): o is CronJob {
  return o && o.apiVersion === CronJob.apiVersion && o.kind === CronJob.kind;
}

export namespace CronJob {
  export const apiVersion = "batch/v1";
  export const group = "batch";
  export const version = "v1";
  export const kind = "CronJob";

  // named constructs a CronJob with metadata.name set to name.
  export function named(name: string): CronJob {
    return new CronJob({metadata: {name}});
  }
  // CronJob represents the configuration of a single cron job.
  export interface Interface {
    // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    metadata: apisMetaV1.ObjectMeta;

    // Specification of the desired behavior of a cron job, including the schedule. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    spec?: CronJobSpec;

    // Current status of a cron job. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    status?: CronJobStatus;
  }
}

// CronJobList is a collection of cron jobs.
export class CronJobList {
  // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  public apiVersion: string;

  // items is the list of CronJobs.
  public items: CronJob[];

  // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  public kind: string;

  // Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  public metadata?: apisMetaV1.ListMeta;

  constructor(desc: CronJobList) {
    this.apiVersion = CronJobList.apiVersion;
    this.items = desc.items.map((i) => new CronJob(i));
    this.kind = CronJobList.kind;
    this.metadata = desc.metadata;
  }
}

export function isCronJobList(o: any): o is CronJobList {
  return o && o.apiVersion === CronJobList.apiVersion && o.kind === CronJobList.kind;
}

export namespace CronJobList {
  export const apiVersion = "batch/v1";
  export const group = "batch";
  export const version = "v1";
  export const kind = "CronJobList";

  // CronJobList is a collection of cron jobs.
  export interface Interface {
    // items is the list of CronJobs.
    items: CronJob[];

    // Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    metadata?: apisMetaV1.ListMeta;
  }
}

// CronJobSpec describes how the job execution will look like and when it will actually run.
export class CronJobSpec {
  // Specifies how to treat concurrent executions of a Job. Valid values are: - "Allow" (default): allows CronJobs to run concurrently; - "Forbid": forbids concurrent runs, skipping next run if previous run hasn't finished yet; - "Replace": cancels currently running job and replaces it with a new one
  public concurrencyPolicy?: string;

  // The number of failed finished jobs to retain. Value must be non-negative integer. Defaults to 1.
  public failedJobsHistoryLimit?: number;

  // Specifies the job that will be created when executing a CronJob.
  public jobTemplate: JobTemplateSpec;

  // The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.
  public schedule: string;

  // Optional deadline in seconds for starting the job if it misses scheduled time for any reason.  Missed jobs executions will be counted as failed ones.
  public startingDeadlineSeconds?: number;

  // The number of successful finished jobs to retain. Value must be non-negative integer. Defaults to 3.
  public successfulJobsHistoryLimit?: number;

  // This flag tells the controller to suspend subsequent executions, it does not apply to already started executions.  Defaults to false.
  public suspend?: boolean;

  constructor(desc: CronJobSpec) {
    this.concurrencyPolicy = desc.concurrencyPolicy;
    this.failedJobsHistoryLimit = desc.failedJobsHistoryLimit;
    this.jobTemplate = desc.jobTemplate;
    this.schedule = desc.schedule;
    this.startingDeadlineSeconds = desc.startingDeadlineSeconds;
    this.successfulJobsHistoryLimit = desc.successfulJobsHistoryLimit;
    this.suspend = desc.suspend;
  }
}

// CronJobStatus represents the current state of a cron job.
export class CronJobStatus {
  // A list of pointers to currently running jobs.
  public active?: apiCoreV1.ObjectReference[];

  // Information when was the last time the job was successfully scheduled.
  public lastScheduleTime?: apisMetaV1.Time;

  // Information when was the last time the job successfully completed.
  public lastSuccessfulTime?: apisMetaV1.Time;
}

// Job represents the configuration of a single job.
export class Job implements KubernetesObject {
  // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  public apiVersion: string;

  // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  public kind: string;

  // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  public metadata: apisMetaV1.ObjectMeta;

  // Specification of the desired behavior of a job. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  public spec?: JobSpec;

  // Current status of a job. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  public status?: JobStatus;

  constructor(desc: Job.Interface) {
    this.apiVersion = Job.apiVersion;
    this.kind = Job.kind;
    this.metadata = desc.metadata;
    this.spec = desc.spec;
    this.status = desc.status;
  }
}

export function isJob(o: any): o is Job {
  return o && o.apiVersion === Job.apiVersion && o.kind === Job.kind;
}

export namespace Job {
  export const apiVersion = "batch/v1";
  export const group = "batch";
  export const version = "v1";
  export const kind = "Job";

  // named constructs a Job with metadata.name set to name.
  export function named(name: string): Job {
    return new Job({metadata: {name}});
  }
  // Job represents the configuration of a single job.
  export interface Interface {
    // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    metadata: apisMetaV1.ObjectMeta;

    // Specification of the desired behavior of a job. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    spec?: JobSpec;

    // Current status of a job. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    status?: JobStatus;
  }
}

// JobCondition describes current state of a job.
export class JobCondition {
  // Last time the condition was checked.
  public lastProbeTime?: apisMetaV1.Time;

  // Last time the condition transit from one status to another.
  public lastTransitionTime?: apisMetaV1.Time;

  // Human readable message indicating details about last transition.
  public message?: string;

  // (brief) reason for the condition's last transition.
  public reason?: string;

  // Status of the condition, one of True, False, Unknown.
  public status: string;

  // Type of job condition, Complete or Failed.
  public type: string;

  constructor(desc: JobCondition) {
    this.lastProbeTime = desc.lastProbeTime;
    this.lastTransitionTime = desc.lastTransitionTime;
    this.message = desc.message;
    this.reason = desc.reason;
    this.status = desc.status;
    this.type = desc.type;
  }
}

// JobList is a collection of jobs.
export class JobList {
  // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  public apiVersion: string;

  // items is the list of Jobs.
  public items: Job[];

  // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  public kind: string;

  // Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  public metadata?: apisMetaV1.ListMeta;

  constructor(desc: JobList) {
    this.apiVersion = JobList.apiVersion;
    this.items = desc.items.map((i) => new Job(i));
    this.kind = JobList.kind;
    this.metadata = desc.metadata;
  }
}

export function isJobList(o: any): o is JobList {
  return o && o.apiVersion === JobList.apiVersion && o.kind === JobList.kind;
}

export namespace JobList {
  export const apiVersion = "batch/v1";
  export const group = "batch";
  export const version = "v1";
  export const kind = "JobList";

  // JobList is a collection of jobs.
  export interface Interface {
    // items is the list of Jobs.
    items: Job[];

    // Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    metadata?: apisMetaV1.ListMeta;
  }
}

// JobSpec describes how the job execution will look like.
export class JobSpec {
  // Specifies the duration in seconds relative to the startTime that the job may be continuously active before the system tries to terminate it; value must be positive integer. If a Job is suspended (at creation or through an update), this timer will effectively be stopped and reset when the Job is resumed again.
  public activeDeadlineSeconds?: number;

  // Specifies the number of retries before marking this job failed. Defaults to 6
  public backoffLimit?: number;

  // CompletionMode specifies how Pod completions are tracked. It can be `NonIndexed` (default) or `Indexed`.
  // 
  // `NonIndexed` means that the Job is considered complete when there have been .spec.completions successfully completed Pods. Each Pod completion is homologous to each other.
  // 
  // `Indexed` means that the Pods of a Job get an associated completion index from 0 to (.spec.completions - 1), available in the annotation batch.kubernetes.io/job-completion-index. The Job is considered complete when there is one successfully completed Pod for each index. When value is `Indexed`, .spec.completions must be specified and `.spec.parallelism` must be less than or equal to 10^5.
  // 
  // This field is alpha-level and is only honored by servers that enable the IndexedJob feature gate. More completion modes can be added in the future. If the Job controller observes a mode that it doesn't recognize, the controller skips updates for the Job.
  public completionMode?: string;

  // Specifies the desired number of successfully finished pods the job should be run with.  Setting to nil means that the success of any pod signals the success of all pods, and allows parallelism to have any positive value.  Setting to 1 means that parallelism is limited to 1 and the success of that pod signals the success of the job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
  public completions?: number;

  // manualSelector controls generation of pod labels and pod selectors. Leave `manualSelector` unset unless you are certain what you are doing. When false or unset, the system pick labels unique to this job and appends those labels to the pod template.  When true, the user is responsible for picking unique labels and specifying the selector.  Failure to pick a unique label may cause this and other jobs to not function correctly.  However, You may see `manualSelector=true` in jobs that were created with the old `extensions/v1beta1` API. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/#specifying-your-own-pod-selector
  public manualSelector?: boolean;

  // Specifies the maximum desired number of pods the job should run at any given time. The actual number of pods running in steady state will be less than this number when ((.spec.completions - .status.successful) < .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
  public parallelism?: number;

  // A label query over pods that should match the pod count. Normally, the system sets this field for you. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
  public selector?: apisMetaV1.LabelSelector;

  // Suspend specifies whether the Job controller should create Pods or not. If a Job is created with suspend set to true, no Pods are created by the Job controller. If a Job is suspended after creation (i.e. the flag goes from false to true), the Job controller will delete all active Pods associated with this Job. Users must design their workload to gracefully handle this. Suspending a Job will reset the StartTime field of the Job, effectively resetting the ActiveDeadlineSeconds timer too. This is an alpha field and requires the SuspendJob feature gate to be enabled; otherwise this field may not be set to true. Defaults to false.
  public suspend?: boolean;

  // Describes the pod that will be created when executing a job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
  public template: apiCoreV1.PodTemplateSpec;

  // ttlSecondsAfterFinished limits the lifetime of a Job that has finished execution (either Complete or Failed). If this field is set, ttlSecondsAfterFinished after the Job finishes, it is eligible to be automatically deleted. When the Job is being deleted, its lifecycle guarantees (e.g. finalizers) will be honored. If this field is unset, the Job won't be automatically deleted. If this field is set to zero, the Job becomes eligible to be deleted immediately after it finishes. This field is alpha-level and is only honored by servers that enable the TTLAfterFinished feature.
  public ttlSecondsAfterFinished?: number;

  constructor(desc: JobSpec) {
    this.activeDeadlineSeconds = desc.activeDeadlineSeconds;
    this.backoffLimit = desc.backoffLimit;
    this.completionMode = desc.completionMode;
    this.completions = desc.completions;
    this.manualSelector = desc.manualSelector;
    this.parallelism = desc.parallelism;
    this.selector = desc.selector;
    this.suspend = desc.suspend;
    this.template = desc.template;
    this.ttlSecondsAfterFinished = desc.ttlSecondsAfterFinished;
  }
}

// JobStatus represents the current state of a Job.
export class JobStatus {
  // The number of actively running pods.
  public active?: number;

  // CompletedIndexes holds the completed indexes when .spec.completionMode = "Indexed" in a text format. The indexes are represented as decimal integers separated by commas. The numbers are listed in increasing order. Three or more consecutive numbers are compressed and represented by the first and last element of the series, separated by a hyphen. For example, if the completed indexes are 1, 3, 4, 5 and 7, they are represented as "1,3-5,7".
  public completedIndexes?: string;

  // Represents time when the job was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. The completion time is only set when the job finishes successfully.
  public completionTime?: apisMetaV1.Time;

  // The latest available observations of an object's current state. When a Job fails, one of the conditions will have type "Failed" and status true. When a Job is suspended, one of the conditions will have type "Suspended" and status true; when the Job is resumed, the status of this condition will become false. When a Job is completed, one of the conditions will have type "Complete" and status true. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
  public conditions?: JobCondition[];

  // The number of pods which reached phase Failed.
  public failed?: number;

  // Represents time when the job controller started processing a job. When a Job is created in the suspended state, this field is not set until the first time it is resumed. This field is reset every time a Job is resumed from suspension. It is represented in RFC3339 form and is in UTC.
  public startTime?: apisMetaV1.Time;

  // The number of pods which reached phase Succeeded.
  public succeeded?: number;
}

// JobTemplateSpec describes the data a Job should have when created from a template
export class JobTemplateSpec {
  // Standard object's metadata of the jobs created from this template. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  public metadata?: apisMetaV1.ObjectMeta;

  // Specification of the desired behavior of the job. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  public spec?: JobSpec;
}